! Introduction

The different bfabricPy packages are currently maintained in a single mono-repo at [https://github.com/fgcz/bfabricPy|github.com/fgcz/bfabricPy].

You can find changelogs and the updated documentation there.

!! Installation

-+bfabric-cli+- is available as part of the [https://pypi.org/project/bfabric-scripts/|bfabric-scripts PyPI package] and can be installed using your Python package manager of choice.

To avoid issues on deployments on machines with old Python versions, we recommend using a tool like -+uv+- to install the package,
as it manages Python for you and will ensure that users have an appropriate version of Python installed:

{CODE(colors="true", language="bash")}
uv tool install -p 3.13 bfabric-scripts
{CODE}

Older versions may be supported as well (as of 2025-02-25 the oldest supported version is Python 3.11).

!! Configuration

To configure bfabricPy you need to obtain your webservicpassword and create a file -+~/.bfabricpy.yml+- with the following structure:

{CODE(colors="true", language="yaml")}
GENERAL:
  # Normally, we would write PRODUCTION here, but,
  # for the sake of the tutorial we are defaulting to TEST as a fail-safe guard.
  default_config: TEST

PRODUCTION:
  login: yourBfabricLogin
  password: yourBfabricWebPassword
  base_url: https://fgcz-bfabric.uzh.ch/bfabric

TEST:
  login: yourBfabricLogin
  password: yourBfabricWebPassword
  base_url: https://fgcz-bfabric-test.uzh.ch/bfabric
{CODE}

You can add more configurations, e.g. if you have a system user that you want to use only in some scenarios.

In the rest of this tutorial, always make sure to set the -+BFABRICPY_CONFIG_ENV=TEST+- environment variable, as follows:

{CODE(colors="true", language="bash")}
export BFABRICPY_CONFIG_ENV=TEST
{CODE}

Because this is a jupyter notebook, I also make sure to set it for the current Python process:

{CODE(colors="true", language="python")}
import os
os.environ["BFABRICPY_CONFIG_ENV"] = "TEST"
{CODE}

!! Getting Help

The interface of bfabric-cli is currently being developed, however you can explore the commands by calling -+--help+- on an arbitrary subcommand,
for instance:

{CODE(colors="true", language="bash")}
bfabric-cli --help
{CODE}

The commands are organized in a hierarchy, and you can call -+--help+- on any subcommand in the tree to check if it has further subcommands, or, 
what its parameters are.

While the documentation of parameters is comprehensive the only current limitation is that we do not get a nice "usage" line showing
exactly how the parameters are supposed to be used.

In general, if possible it makes sense to use the parameters with their name, as not all parameters may remain available forever.
How to version/stabilize these CLI APIs is still an open question.

{CODE(colors="true", language="bash")}
bfabric-cli api create --help
{CODE}

Please note that this documentation is autogenerated from the code using [https://github.com/BrianPugh/cyclopts|cyclopts]
and you should ideally provide as many parameters by name rather than position. Especially sequences are not really clearly documented, which hopefully will be resolved later.

! Generic entity API

!! Reading entities

Generic functionality to read entities is available in -+bfabric-cli api read+-.

{CODE(colors="true", language="bash")}
bfabric-cli api read --help
{CODE}

As you can see, we first need to provide the endpoint, and a query, we can specify the format as well there are some additional fields.

{CODE(colors="true", language="bash")}
bfabric-cli api read resource --limit 10
{CODE}

The default table is not rendering correctly in Jupyter as of now (2025-02-25), so we execute this in a shell.

We can control the columns displayed:

{CODE(colors="true", language="bash")}
bfabric-cli api read resource --limit 10 --columns id,name,relativepath,description,filechecksum
{CODE}

In addition to the interactive table format, we also support -+json+- and -+yaml+- outputs.
For instance to get the results in JSON format (restricting the columns to the same subset as before):

{CODE(colors="true", language="bash")}
bfabric-cli api read resource --limit 10 --columns id,name,relativepath,description,filechecksum --format json
{CODE}

For instance to read all resources created by -+pfeeder+- between 2024-05-01 and 2024-05-02 (exclusive) we can execute the following command.

{CODE(colors="true", language="bash")}
bfabric-cli api read resource createdby pfeeder createdafter 2024-05-01 createdbefore 2024-05-02 --columns id,relativepath,createdby
{CODE}

A small gimmick, is that it also prints the bfabricPy query, e.g. in this case we can perform the same operation in Python:

{CODE(colors="true", language="python")}
from bfabric import Bfabric
client = Bfabric.from_config()
results = client.read(endpoint='resource', 
    obj={'createdby': 'pfeeder', 'createdafter': '2024-05-01', 'createdbefore': '2024-05-02'}, max_results=100)
results[0]
{CODE}

One useful feature, is being able to supply multiple values for the same key.
The way this is done is you repeat the key-value pair for each additional value.

{CODE(colors="true", language="bash")}
bfabric-cli api read resource id 2784586 id 2784576 id 2784573
{CODE}

Everything but the main output will be printed to standard error, so it's easier to pipe the main output.
However, if you want to persist the output to a file it's recommended to use the -+--file+- argument instead.

{CODE(colors="true", language="bash")}
bfabric-cli api read resource createdby pfeeder createdafter 2024-05-01 createdbefore 2024-05-02 \
    --format yaml --file result.yml 
{CODE}

{CODE(colors="true", language="bash")}
ls -lh result.yml
{CODE}

!! Creating entities

{CODE(colors="true", language="bash")}
bfabric-cli api create --help
{CODE}

{CODE(colors="true", language="bash")}
bfabric-cli api create resource name "hello_world_$(date -Iseconds).txt" workunitid 321802 base64 aGVsbG8gd29ybGQ=
{CODE}

We can check the result here: https://fgcz-bfabric-test.uzh.ch/bfabric/workunit/show.html?id=321802&tab=resources

Or, we perform a further call.

Since we don't want it to remain there we delete it again: (adjust the ID and __verify__ operation before deleting)

{CODE(colors="true", language="bash")}
bfabric-cli api delete resource 2805634
{CODE}

!! Updating entities

The main difference between -+bfabric-cli api update+- and -+bfabric-cli api create+- is that -+update+- requires an id to be passed.
While this distinction is implied in the API the command line tools make this explicit to prevent user errors.

Hence, the -+bfabric-cli api update+- command in addition to a sequence of attribute value pairs needs to be told about the id of the entity you want to update.

The second difference, is that while create will always be performed without a prompt, the update is considered destructive and hence you will first be presented with a display of the current entity with a prompt to confirm the update.

{CODE(colors="true", language="bash")}
bfabric-cli api update --help
{CODE}

{CODE(colors="true", language="bash")}
bfabric-cli api update workunit 321802 description "We are testing some things today"
{CODE}

!! Deleting entities

We are using yes, so this always deletes the entity for the purpose of the sample, but before doing the deletion you should revise whether it really is the entity that you want to delete.

If you need to perform this operation programmatically, make sure you are deleting __the correct__ entities, and then set -+--no-confirm+- to the command.

{CODE(colors="true", language="bash")}
bfabric-cli api delete --help
{CODE}

! Executable-specific functionality

When working with bfabric apps it can be useful to check the contents of encoded executables, and, upload executables directly.
While originally a XML export is imported with the web app, the CLI supports import of yaml files.

!! Show executable

{CODE(colors="true", language="bash")}
bfabric-cli executable show --help
{CODE}

{CODE(colors="true", language="bash")}
bfabric-cli executable show 32859
{CODE}

{CODE(colors="true", language="bash")}
bfabric-cli executable show 33469 
{CODE}

!! Upload executable

For B-Fabric application developers you can upload executables from a YAML (this command is experimental):

{CODE(colors="true", language="bash")}
bfabric-cli executable upload --help
{CODE}

! Dataset-specific functionality

Dataset-specific functionality is available through the -+bfabric-cli dataset+- subcommand.

{CODE(colors="true", language="bash")}
bfabric-cli dataset --help
{CODE}

!! Show dataset directly

We can show an existing dataset:

{CODE(colors="true", language="bash")}
bfabric-cli dataset show --help
{CODE}

{CODE(colors="true", language="bash")}
bfabric-cli dataset show 53706
{CODE}

You can also show this as YAML if there is a problem with the rendering (e.g. too many columns for your console):

{CODE(colors="true", language="bash")}
bfabric-cli dataset show 53706 --format yaml
{CODE}

!! Download datasets

To download this dataset to a file we can use -+bfabric-cli dataset download+-:

{CODE(colors="true", language="bash")}
bfabric-cli dataset download --help
{CODE}

{CODE(colors="true", language="bash")}
bfabric-cli dataset download 53706 test_data.parquet --format parquet
{CODE}

{CODE(colors="true", language="python")}
import polars
polars.read_parquet('test_data.parquet')
{CODE}

!! Upload datasets

The upload commands are structured into several subcommands, since they do have different parameters between parquet and csv/tsv.

{CODE(colors="true", language="bash")}
bfabric-cli dataset upload --help
{CODE}

{CODE(colors="true", language="bash")}
bfabric-cli dataset upload csv --help
{CODE}

{CODE(colors="true", language="bash")}
bfabric-cli dataset upload parquet --help
{CODE}

To upload the parquet file we just wrote:

{CODE(colors="true", language="bash")}
bfabric-cli dataset upload parquet test_data.parquet --container-id 3000
{CODE}

You should be able to find the -+test_data+- dataset here now:

https://fgcz-bfabric-test.uzh.ch/bfabric/project/show.html?id=3000&tab=datasets

! Workunit-specific functionality

!! Pending workunits

{CODE(colors="true", language="bash")}
bfabric-cli workunit not-available --help
{CODE}

We usually run this find compMS workunits that failed:

{CODE(colors="true", language="bash")}
BFABRICPY_CONFIG_ENV=PRODUCTION bfabric-cli workunit not-available
{CODE}

!! Workunit definition export

When working with bfabric-app-runner it can be useful to export the app definition to a file first.
This functionality is available in -+bfabric-cli workunit export-definition+- which is very simple to use, by default it will write the -+workunit_definition.yml+- file if you just give the script a workunit ID.
Of course, you can customize the filename as well.

{CODE(colors="true", language="bash")}
bfabric-cli workunit export-definition --help
{CODE}

{CODE(colors="true", language="bash")}
bfabric-cli workunit export-definition 316119
{CODE}

{CODE(colors="true", language="bash")}
cat workunit_definition.yml
{CODE}

For parsing, a pydantic model is available in the -+bfabric+- Python package:

{CODE(colors="true", language="python")}
from bfabric.experimental.workunit_definition import WorkunitDefinition
from pathlib import Path
from rich.pretty import pprint
pprint(WorkunitDefinition.from_yaml(Path('workunit_definition.yml')))
{CODE}