from {{project_name}}.steps.compute_file_info import write_file_info_yaml
from {{project_name}}.steps.collect_info import write_index_html
from {{project_name}}.workflow_params import WorkflowParams
from pathlib import Path
from zipfile import ZipFile
import yaml

input_file_paths = sorted(Path("input").glob("*"))
input_file_names = [p.name for p in input_file_paths]
workflow_params = WorkflowParams.model_validate(yaml.safe_load(Path("params.yaml").read_text()))


rule file_info_yaml:
    input:
        file="input/{file}"
    output:
        yml="info/{file}.yml"
    params:
        request_failure=workflow_params.request_failure
    run:
        if params.request_failure:
            raise ValueError("The user requested a failure (for testing purposes).")
        write_file_info_yaml(input.file, output.yml)


rule index_html:
    input:
        files=expand("info/{name}.yml", name=input_file_names)
    output:
        html="index.html"
    run:
        write_index_html(input.files, output.html)


rule output_zip:
    input:
        html=rules.index_html.output.html,
    output:
        zip="output.zip"
    run:
        with ZipFile(output.zip, mode="w") as zip:
            zip.write("index.html", input.html)

rule outputs_yml:
    input:
        zip=rules.output_zip.output.zip,
    output:
        yml="outputs.yml",
    run:
        content = {
            "outputs": [
                {
                    "type": "bfabric_copy_resource",
                    "local_path": str(Path(input.zip).resolve()),
                    "store_entry_path": "file_info.zip",
                }
            ]
        }
        Path(output.yml).write_text(yaml.safe_dump(content))
