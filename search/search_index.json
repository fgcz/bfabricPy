{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>This package connects the bfabric system to the python and R world while providing a JSON and REST interface using Flask. The bfabricShiny R package is an extension and provides code snippets and sample implementation for a seamless R shiny bfabric integration. For more advanced users the bfabricPy package also provides a powerful query interface on the command-line though using the provided scripts.</p> <p>Please see below for how to install bfabricPy.</p>"},{"location":"#installation","title":"Installation","text":"<p>The package is not available on PyPI as of now, but can be installed directly from GitHub and a <code>stable</code> branch is available for your convenience.</p> <p>If you are only interested in running the command line scripts, installation with <code>pipx</code> is recommended as it will create a separate virtual environment for bfabricPy and make it possible to upgrade your installation later easily.</p> <pre><code>pipx install \"git+https://github.com/fgcz/bfabricPy.git@stable\"\n</code></pre> <p>Note that <code>pipx</code> is also useful in scripts, if you want to run a particular version without forcing the global installation of that version (simply replace \"stable\" with a tag of your chosing):</p> <pre><code>pipx run --spec \"git+https://github.com/fgcz/bfabricPy.git@stable\" bfabric_read.py --help\n</code></pre> <p>If you want to add it to a <code>pyproject.toml</code> the syntax for specifying a git dependency is as follows:</p> <pre><code>[project]\ndependencies = [\n    \"bfabric @ git+https://github.com/fgcz/bfabricPy.git@stable\"\n]\n</code></pre>"},{"location":"#updating","title":"Updating","text":"<p>If you installed with <code>pipx</code>, you can update the package to the most recent release with the following command:</p> <pre><code>pipx upgrade bfabric\n</code></pre>"},{"location":"#configuration","title":"Configuration","text":"<p>Create a file as follows: (note: the password is not your login password, but the web service password available on your profile page)</p> <pre><code># ~/.bfabricpy.yml\n\nGENERAL:\n  default_config: PRODUCTION\n\nPRODUCTION:\n  login: yourBfabricLogin\n  password: yourBfabricWebPassword\n  base_url: https://fgcz-bfabric.uzh.ch/bfabric\n</code></pre> <p>You can also include an additional config for the TEST instance</p> <pre><code>TEST:\n  login: yourBfabricLogin\n  password: yourBfabricWebPassword\n  base_url: https://fgcz-bfabric-test.uzh.ch/bfabric\n</code></pre>"},{"location":"changelog/","title":"Changelog","text":"<p>The format is based on Keep a Changelog.</p> <p>Versioning currently follows <code>X.Y.Z</code> where</p> <ul> <li><code>X</code> is used for major changes, that contain breaking changes</li> <li><code>Y</code> should be the current bfabric release</li> <li><code>Z</code> is increased for feature releases, that should not break the API</li> </ul>"},{"location":"changelog/#unreleased","title":"[Unreleased]","text":""},{"location":"changelog/#1135-2024-08-13","title":"[1.13.5] - 2024-08-13","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li>The <code>Bfabric</code> instance is now pickleable.</li> <li>Entities mapping:</li> <li>Add <code>Entity.id</code> and <code>Entity.web_url</code> properties.</li> <li>Add <code>Entity.__getitem__</code> and <code>Entity.get</code> to access fields from the data dictionary directly.</li> <li>Add <code>Entity.find_by</code> to find entities by a query.</li> <li>More types and relationships</li> <li>Relationships defer imports to descriptor call, i.e. circular relationships are possible now.</li> <li><code>HasOne</code> and <code>HasMany</code> allow defining <code>optional=True</code> to indicate fields which can be missing under some circumstances.</li> <li>Add <code>nodelist</code> column and application name to <code>bfabric_list_not_available_proteomics_workunits.py</code> output.</li> </ul>"},{"location":"changelog/#changed","title":"Changed","text":"<ul> <li><code>Entity.find_all</code> supports more than 100 IDs now by using the experimental MultiQuery API.</li> </ul>"},{"location":"changelog/#1134-2024-08-05","title":"[1.13.4] - 2024-08-05","text":""},{"location":"changelog/#added_1","title":"Added","text":"<ul> <li>Add <code>Workunit</code>, <code>Parameter</code>, and <code>Resource</code> entities.</li> <li>Add concept of has_many and has_one relationships to entities.</li> <li><code>bfabric_slurm_queue_status.py</code> to quickly check slurm queue status.</li> <li><code>Bfabric.save</code> provides <code>method</code> which can be set to <code>checkandinsert</code> for specific use cases.</li> </ul>"},{"location":"changelog/#changed_1","title":"Changed","text":"<ul> <li>Most messages are now logged to debug level.</li> <li>The old verbose version information is now always logged, to INFO level, since it could entail useful information for error reporting.</li> </ul>"},{"location":"changelog/#1133-2024-07-18","title":"[1.13.3] - 2024-07-18","text":""},{"location":"changelog/#added_2","title":"Added","text":"<ul> <li>Flask</li> <li>New endpoint <code>GET /config/remote_base_url</code> for testing</li> </ul>"},{"location":"changelog/#changed_2","title":"Changed","text":"<ul> <li>Flask</li> <li>Simplify logging by using loguru only.</li> <li>Simplified setup logic since the production use case should use a WSGI server.</li> </ul>"},{"location":"changelog/#fixed","title":"Fixed","text":"<ul> <li><code>bfabric_save_csv2dataset.py</code> had an undeclared dependency on numpy and a few bugs which was improved.</li> </ul>"},{"location":"changelog/#1132-2024-07-11","title":"[1.13.2] - 2024-07-11","text":""},{"location":"changelog/#added_3","title":"Added","text":"<ul> <li>Add <code>bfabric.entities.Dataset</code> to easily read datasets.</li> <li>Pydantic-based configuration parsing</li> <li>The config format did not change.</li> <li>The code is easier to maintain now.</li> <li>Additionally, there is a lot more validation of the configuration file now, that should catch errors early.</li> <li>Make host and port configurable in <code>bfabric_flask.py</code> (currently only dev mode).</li> </ul>"},{"location":"changelog/#1131-2024-07-02","title":"[1.13.1] - 2024-07-02","text":""},{"location":"changelog/#changed_3","title":"Changed","text":"<ul> <li>bfabric_save_csv2dataset will raise an error if problematic characters are found in any of the cells</li> <li>Correctly define <code>bfabric_setWorkunitStatus_available.py</code>, and <code>processing</code> and <code>failed</code> variants.</li> </ul>"},{"location":"changelog/#added_4","title":"Added","text":"<ul> <li>Add loguru for future logging refactoring.</li> <li>Easily runnable tests with <code>nox</code> and standardized formatting using <code>pre-commit</code>.</li> </ul>"},{"location":"changelog/#removed","title":"Removed","text":"<ul> <li>Pandas is no longer a dependency, and has been replaced by polars.</li> </ul>"},{"location":"changelog/#1130-2024-05-24","title":"[1.13.0] - 2024-05-24","text":"<p>This is a major release refactoring bfabricPy's API.</p>"},{"location":"changelog/#changed_4","title":"Changed","text":"<ul> <li>The <code>Bfabric</code> class operations now return <code>ResultContainer</code> objects.</li> <li>These provide a list-like interface to access individual items or iterate over them.</li> <li>Individual items are a dictionary, potentially nested, and not specific to suds/zeep anymore.</li> <li>Convenience conversions, e.g. to a polars DataFrame, can be provided there.</li> <li>Configuration is now defined in <code>~/.bfabricpy.yml</code> and supports multiple configurations, which can be selected by the <code>BFABRICPY_CONFIG_ENV</code> environment variable. Please consult the README for an example configuration.</li> <li>Use <code>pyproject.toml</code> for package configuration.</li> <li>Scripts have been refactored on a case-by-case basis.</li> </ul>"},{"location":"changelog/#added_5","title":"Added","text":"<ul> <li>Zeep can be used instead of suds for SOAP communication.</li> <li><code>Bfabric</code> can be instantiated without authentication, that can be provided later. This is useful in a server setup.</li> <li>Pagination support in <code>Bfabric</code>, specify the number of max_results and a potential offset. Pages handling is abstracted away.</li> <li>Detect errors in responses, e.g. invalid login.</li> </ul>"},{"location":"changelog/#removed_1","title":"Removed","text":"<ul> <li>Several old scripts have been moved into a <code>deprecated_scripts</code> folder.</li> <li>Wrapper creator related code is currently not updated but has been extracted into a dedicated folder <code>wrapper_creator</code> as well.</li> </ul>"},{"location":"contribute/","title":"Contribute","text":"<p>This page describes some information relevant for contributing to bfabricPy.</p>"},{"location":"contribute/#development-install","title":"Development install","text":"<p>You should install the <code>dev</code> group as it contains some extra packages for running the tests.</p> <pre><code>pip install -e \".[dev]\"\n</code></pre>"},{"location":"contribute/#running-tests","title":"Running tests","text":"<p>With <code>nox</code> and <code>uv</code> installed, it is as simple as running <code>nox</code> in the project root without any arguments.</p>"},{"location":"contribute/#integration-tests","title":"Integration tests","text":"<p>Note that integration tests have been moved to a separate repository. Please contact us if you are interested.</p>"},{"location":"contribute/#documentation","title":"Documentation","text":"<p>We currently do not have a versioning solution for the documentation, but we can add that later once it is more mature.</p> <pre><code># To preview while you write it\nmkdocs serve\n\n# To publish after changes\nmkdocs gh-deploy\n</code></pre>"},{"location":"contribute/#release","title":"Release","text":"<p>To create a release, increase the version in <code>pyproject.toml</code>, prepare <code>changelog.md</code>, commit everything and run <code>release.py</code>. This script will</p> <ul> <li>Create a tag and push it to GitHub</li> <li>Merge the changes to the <code>stable</code> branch and push it to GitHub</li> <li>Build the documentation and push it to GitHub Pages</li> </ul> <p>The only manual step that remains is creating a release on GitHub. To do so, you can paste the changelog section of the release and create a new release on GitHub using the tag that was created.</p>"},{"location":"entities/","title":"Entities","text":""},{"location":"entities/#high-level-bfabricentities-api","title":"High-level <code>bfabric.entities</code> API","text":"<p>The <code>bfabric.entities</code> module offers a high-level, read-only API for retrieval of entities in the B-Fabric system.</p> <p>This API is designed to simplify entity access by providing lazy-loading capabilities for associated entities. Entities within this module can maintain a reference to a B-Fabric client instance, enabling seamless integration and data retrieval.</p>"},{"location":"entities/#key-features","title":"Key Features","text":"<ul> <li>Read-Only Access: This module is strictly for read-only operations. None of the classes or methods should be used to modify the database.</li> <li>Lazy-Loading: Entities are initialized with basic data as returned by a .read operation on its endpoint. However, associated entities are not loaded until explicitly requested, enhancing performance and reducing unnecessary data processing.</li> <li>Modular Design: Only include generic functionality within this module. Avoid adding highly specific logic to ensure the module remains maintainable over time.</li> <li>No Circular Imports: Ensure there are no circular dependencies between entities by deferring imports of other entities inside modules until all relevant modules are processed.</li> </ul>"},{"location":"entities/#entity","title":"Entity","text":"<p>Each entity has to provide the name of its B-Fabric entity classname as <code>ENDPOINT</code>. An entity is defined uniquely by its <code>classname</code> and <code>id</code>.</p> <p>Entities are initialized with the full result structure obtained from a <code>read</code> operation on its particular endpoint. A <code>return_id_only</code> result is generally not supposed to be used to initialize an entity instance and behavior is undefined as of now. In cases where it makes sense to operate on the ids, it's better to directly call the <code>Bfabric</code> client methods.</p> <p>Entities can be retrieved with the methods <code>Entity.find</code>, <code>Entity.find_all</code> and <code>Entity.find_by</code>. When loading multiple entities of the same type, <code>Entity.find_all</code> and <code>Entity.find_by</code> should be preferred. These two methods return a dictionary mapping entity ID to instance and this often helps avoid redundant API calls when expanding relationships over multiple entities.</p>"},{"location":"entities/#relationships","title":"Relationships","text":"<p>Custom descriptors are available which are used to represent relationships and enable lazy-loading of data. Currently the following descriptors are available:</p> <ul> <li><code>HasOne</code>: Defines a one-to-one relationship between entities.</li> <li><code>HasMany</code>: Defines a one-to-many relationship between entities.</li> </ul> <p>Both support setting an additional argument <code>optional=True</code> which will ensure <code>None</code> (in the case of <code>HasOne</code>) and an empty collection (in the case of <code>HasMany</code>) are returned when there is no field at all in the result returned by the API.</p>"}]}