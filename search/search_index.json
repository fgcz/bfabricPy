{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home This package connects the bfabric system to the python and R world while providing a JSON and REST interface using Flask . The bfabricShiny R package is an extension and provides code snippets and sample implementation for a seamless R shiny bfabric integration. For more advanced users the bfabricPy package also provides a powerful query interface on the command-line though using the provided scripts. Installation The package can be installed like any other Python package, so if you are familiar you might not need to read this section. Currently, it's only available from GitHub. The best way to install the package depends on your use case, i.e. whether you want to: Use the command line scripts Use the Python API Develop on the package The command line scripts are currently included in all cases. Command line scripts To use the command line scripts, it's recommended to install bfabricPy with pipx . If you don't have pipx installed, refer to the pipx documentation for instructions. You can execute a command using a specific version of bfabricPy with the pipx run command. This command handles the dependencies of multiple concurrent installations: pipx run --spec \"git+https://github.com/fgcz/bfabricPy.git@stable\" bfabric_read.py --help To install a specific version of bfabricPy on your system and make the command available without pipx run prefix, use the following command: pipx install \"git+https://github.com/fgcz/bfabricPy.git@stable\" bfabric_read.py --help Python API If you're interested in using the Python API of bfabricPy , you have two options: 1. Configure it in your pyproject.toml file. [project] dependencies = [ \"bfabricPy @ git+https://github.com/fgcz/bfabricPy.git@stable\" ] 2. Install the bfabricPy package directly using pip. pip install git+https://github.com/fgcz/bfabricPy.git Development As a bfabricPy developer: (i.e. an editable install) pip install -e \".[dev]\" Configuration Create a file as follows: (note: the password is not your login password, but the web service password) # ~/.bfabricpy.yml GENERAL: default_config: PRODUCTION PRODUCTION: login: yourBfabricLogin password: yourBfabricWebPassword base_url: https://fgcz-bfabric.uzh.ch/bfabric You can also include an additional config for the TEST instance TEST: login: yourBfabricLogin password: yourBfabricWebPassword base_url: https://fgcz-bfabric-test.uzh.ch/bfabric","title":"Home"},{"location":"#home","text":"This package connects the bfabric system to the python and R world while providing a JSON and REST interface using Flask . The bfabricShiny R package is an extension and provides code snippets and sample implementation for a seamless R shiny bfabric integration. For more advanced users the bfabricPy package also provides a powerful query interface on the command-line though using the provided scripts.","title":"Home"},{"location":"#installation","text":"The package can be installed like any other Python package, so if you are familiar you might not need to read this section. Currently, it's only available from GitHub. The best way to install the package depends on your use case, i.e. whether you want to: Use the command line scripts Use the Python API Develop on the package The command line scripts are currently included in all cases.","title":"Installation"},{"location":"#command-line-scripts","text":"To use the command line scripts, it's recommended to install bfabricPy with pipx . If you don't have pipx installed, refer to the pipx documentation for instructions. You can execute a command using a specific version of bfabricPy with the pipx run command. This command handles the dependencies of multiple concurrent installations: pipx run --spec \"git+https://github.com/fgcz/bfabricPy.git@stable\" bfabric_read.py --help To install a specific version of bfabricPy on your system and make the command available without pipx run prefix, use the following command: pipx install \"git+https://github.com/fgcz/bfabricPy.git@stable\" bfabric_read.py --help","title":"Command line scripts"},{"location":"#python-api","text":"If you're interested in using the Python API of bfabricPy , you have two options:","title":"Python API"},{"location":"#1-configure-it-in-your-pyprojecttoml-file","text":"[project] dependencies = [ \"bfabricPy @ git+https://github.com/fgcz/bfabricPy.git@stable\" ]","title":"1. Configure it in your pyproject.toml file."},{"location":"#2-install-the-bfabricpy-package-directly-using-pip","text":"pip install git+https://github.com/fgcz/bfabricPy.git","title":"2. Install the bfabricPy package directly using pip."},{"location":"#development","text":"As a bfabricPy developer: (i.e. an editable install) pip install -e \".[dev]\"","title":"Development"},{"location":"#configuration","text":"Create a file as follows: (note: the password is not your login password, but the web service password) # ~/.bfabricpy.yml GENERAL: default_config: PRODUCTION PRODUCTION: login: yourBfabricLogin password: yourBfabricWebPassword base_url: https://fgcz-bfabric.uzh.ch/bfabric You can also include an additional config for the TEST instance TEST: login: yourBfabricLogin password: yourBfabricWebPassword base_url: https://fgcz-bfabric-test.uzh.ch/bfabric","title":"Configuration"},{"location":"changelog/","text":"Changelog The format is based on Keep a Changelog . Versioning currently follows X.Y.Z where X is used for major changes, that contain breaking changes Y should be the current bfabric release Z is increased for feature releases, that should not break the API [tba] - tba Added The Bfabric instance is now pickleable. Entities mapping: More types and relationships Relationships defer imports to descriptor call, i.e. circular relationships are possible now. Add Entity.id and Entity.web_url properties. HasOne and HasMany allow defining optional=True to indicate fields which can be missing under some circumstances. [1.13.4] - 2024-08-05 Added Add Workunit , Parameter , and Resource entities. Add concept of has_many and has_one relationships to entities. bfabric_slurm_queue_status.py to quickly check slurm queue status. Bfabric.save provides method which can be set to checkandinsert for specific use cases. Changed Most messages are now logged to debug level. The old verbose version information is now always logged, to INFO level, since it could entail useful information for error reporting. [1.13.3] - 2024-07-18 Added Flask New endpoint GET /config/remote_base_url for testing Changed Flask Simplify logging by using loguru only. Simplified setup logic since the production use case should use a WSGI server. Fixed bfabric_save_csv2dataset.py had an undeclared dependency on numpy and a few bugs which was improved. [1.13.2] - 2024-07-11 Added Add bfabric.entities.Dataset to easily read datasets. Pydantic-based configuration parsing The config format did not change. The code is easier to maintain now. Additionally, there is a lot more validation of the configuration file now, that should catch errors early. Make host and port configurable in bfabric_flask.py (currently only dev mode). [1.13.1] - 2024-07-02 Changed bfabric_save_csv2dataset will raise an error if problematic characters are found in any of the cells Correctly define bfabric_setWorkunitStatus_available.py , and processing and failed variants. Added Add loguru for future logging refactoring. Easily runnable tests with nox and standardized formatting using pre-commit . Removed Pandas is no longer a dependency, and has been replaced by polars. [1.13.0] - 2024-05-24 This is a major release refactoring bfabricPy's API. Changed The Bfabric class operations now return ResultContainer objects. These provide a list-like interface to access individual items or iterate over them. Individual items are a dictionary, potentially nested, and not specific to suds/zeep anymore. Convenience conversions, e.g. to a polars DataFrame, can be provided there. Configuration is now defined in ~/.bfabricpy.yml and supports multiple configurations, which can be selected by the BFABRICPY_CONFIG_ENV environment variable. Please consult the README for an example configuration. Use pyproject.toml for package configuration. Scripts have been refactored on a case-by-case basis. Added Zeep can be used instead of suds for SOAP communication. Bfabric can be instantiated without authentication, that can be provided later. This is useful in a server setup. Pagination support in Bfabric , specify the number of max_results and a potential offset. Pages handling is abstracted away. Detect errors in responses, e.g. invalid login. Removed Several old scripts have been moved into a deprecated_scripts folder. Wrapper creator related code is currently not updated but has been extracted into a dedicated folder wrapper_creator as well.","title":"Changelog"},{"location":"changelog/#changelog","text":"The format is based on Keep a Changelog . Versioning currently follows X.Y.Z where X is used for major changes, that contain breaking changes Y should be the current bfabric release Z is increased for feature releases, that should not break the API","title":"Changelog"},{"location":"changelog/#tba-tba","text":"","title":"[tba] - tba"},{"location":"changelog/#added","text":"The Bfabric instance is now pickleable. Entities mapping: More types and relationships Relationships defer imports to descriptor call, i.e. circular relationships are possible now. Add Entity.id and Entity.web_url properties. HasOne and HasMany allow defining optional=True to indicate fields which can be missing under some circumstances.","title":"Added"},{"location":"changelog/#1134-2024-08-05","text":"","title":"[1.13.4] - 2024-08-05"},{"location":"changelog/#added_1","text":"Add Workunit , Parameter , and Resource entities. Add concept of has_many and has_one relationships to entities. bfabric_slurm_queue_status.py to quickly check slurm queue status. Bfabric.save provides method which can be set to checkandinsert for specific use cases.","title":"Added"},{"location":"changelog/#changed","text":"Most messages are now logged to debug level. The old verbose version information is now always logged, to INFO level, since it could entail useful information for error reporting.","title":"Changed"},{"location":"changelog/#1133-2024-07-18","text":"","title":"[1.13.3] - 2024-07-18"},{"location":"changelog/#added_2","text":"Flask New endpoint GET /config/remote_base_url for testing","title":"Added"},{"location":"changelog/#changed_1","text":"Flask Simplify logging by using loguru only. Simplified setup logic since the production use case should use a WSGI server.","title":"Changed"},{"location":"changelog/#fixed","text":"bfabric_save_csv2dataset.py had an undeclared dependency on numpy and a few bugs which was improved.","title":"Fixed"},{"location":"changelog/#1132-2024-07-11","text":"","title":"[1.13.2] - 2024-07-11"},{"location":"changelog/#added_3","text":"Add bfabric.entities.Dataset to easily read datasets. Pydantic-based configuration parsing The config format did not change. The code is easier to maintain now. Additionally, there is a lot more validation of the configuration file now, that should catch errors early. Make host and port configurable in bfabric_flask.py (currently only dev mode).","title":"Added"},{"location":"changelog/#1131-2024-07-02","text":"","title":"[1.13.1] - 2024-07-02"},{"location":"changelog/#changed_2","text":"bfabric_save_csv2dataset will raise an error if problematic characters are found in any of the cells Correctly define bfabric_setWorkunitStatus_available.py , and processing and failed variants.","title":"Changed"},{"location":"changelog/#added_4","text":"Add loguru for future logging refactoring. Easily runnable tests with nox and standardized formatting using pre-commit .","title":"Added"},{"location":"changelog/#removed","text":"Pandas is no longer a dependency, and has been replaced by polars.","title":"Removed"},{"location":"changelog/#1130-2024-05-24","text":"This is a major release refactoring bfabricPy's API.","title":"[1.13.0] - 2024-05-24"},{"location":"changelog/#changed_3","text":"The Bfabric class operations now return ResultContainer objects. These provide a list-like interface to access individual items or iterate over them. Individual items are a dictionary, potentially nested, and not specific to suds/zeep anymore. Convenience conversions, e.g. to a polars DataFrame, can be provided there. Configuration is now defined in ~/.bfabricpy.yml and supports multiple configurations, which can be selected by the BFABRICPY_CONFIG_ENV environment variable. Please consult the README for an example configuration. Use pyproject.toml for package configuration. Scripts have been refactored on a case-by-case basis.","title":"Changed"},{"location":"changelog/#added_5","text":"Zeep can be used instead of suds for SOAP communication. Bfabric can be instantiated without authentication, that can be provided later. This is useful in a server setup. Pagination support in Bfabric , specify the number of max_results and a potential offset. Pages handling is abstracted away. Detect errors in responses, e.g. invalid login.","title":"Added"},{"location":"changelog/#removed_1","text":"Several old scripts have been moved into a deprecated_scripts folder. Wrapper creator related code is currently not updated but has been extracted into a dedicated folder wrapper_creator as well.","title":"Removed"},{"location":"entities/","text":"High-level bfabric.entities API The bfabric.entities module offers a high-level, read-only API for retrieval of entities in the B-Fabric system. This API is designed to simplify entity access by providing lazy-loading capabilities for associated entities. Entities within this module can maintain a reference to a B-Fabric client instance, enabling seamless integration and data retrieval. Key Features Read-Only Access : This module is strictly for read-only operations. None of the classes or methods should be used to modify the database. Lazy-Loading : Entities are initialized with basic data as returned by a .read operation on its endpoint. However, associated entities are not loaded until explicitly requested, enhancing performance and reducing unnecessary data processing. Modular Design : Only include generic functionality within this module. Avoid adding highly specific logic to ensure the module remains maintainable over time. No Circular Imports : Ensure there are no circular dependencies between entities by deferring imports of other entities inside modules until all relevant modules are processed. Entity Each entity has to provide the name of its B-Fabric of its class name as ENDPOINT . An entity is defined uniquely by its classname and id . Entities are initialized with the full result structure obtained from a read operation on its particular endpoint. A return_id_only result is generally not supposed to be used to initialize an entity instance and behavior is undefined as of now. In cases where it makes sense to operate on the ids, it's better to directly call the Bfabric client methods. Entities can be retrieved with the methods Entity.find and Entity.find_all , whenever loading multiple entities of the same type the latter should be preferred since it reduces the number of API calls and returns a dictionary mapping entity ID to instance. Relationships Custom descriptors are available which are used to represent relationships and enable lazy-loading of data. Currently the following descriptors are available: HasOne : Defines a one-to-one relationship between entities. HasMany : Defines a one-to-many relationship between entities. Both support setting an additional argument optional=True which will ensure None (in the case of HasOne ) and an empty collection (in the case of HasMany ) are returned when there is no field at all in the result returned by the API.","title":"Entities"},{"location":"entities/#high-level-bfabricentities-api","text":"The bfabric.entities module offers a high-level, read-only API for retrieval of entities in the B-Fabric system. This API is designed to simplify entity access by providing lazy-loading capabilities for associated entities. Entities within this module can maintain a reference to a B-Fabric client instance, enabling seamless integration and data retrieval.","title":"High-level bfabric.entities API"},{"location":"entities/#key-features","text":"Read-Only Access : This module is strictly for read-only operations. None of the classes or methods should be used to modify the database. Lazy-Loading : Entities are initialized with basic data as returned by a .read operation on its endpoint. However, associated entities are not loaded until explicitly requested, enhancing performance and reducing unnecessary data processing. Modular Design : Only include generic functionality within this module. Avoid adding highly specific logic to ensure the module remains maintainable over time. No Circular Imports : Ensure there are no circular dependencies between entities by deferring imports of other entities inside modules until all relevant modules are processed.","title":"Key Features"},{"location":"entities/#entity","text":"Each entity has to provide the name of its B-Fabric of its class name as ENDPOINT . An entity is defined uniquely by its classname and id . Entities are initialized with the full result structure obtained from a read operation on its particular endpoint. A return_id_only result is generally not supposed to be used to initialize an entity instance and behavior is undefined as of now. In cases where it makes sense to operate on the ids, it's better to directly call the Bfabric client methods. Entities can be retrieved with the methods Entity.find and Entity.find_all , whenever loading multiple entities of the same type the latter should be preferred since it reduces the number of API calls and returns a dictionary mapping entity ID to instance.","title":"Entity"},{"location":"entities/#relationships","text":"Custom descriptors are available which are used to represent relationships and enable lazy-loading of data. Currently the following descriptors are available: HasOne : Defines a one-to-one relationship between entities. HasMany : Defines a one-to-many relationship between entities. Both support setting an additional argument optional=True which will ensure None (in the case of HasOne ) and an empty collection (in the case of HasMany ) are returned when there is no field at all in the result returned by the API.","title":"Relationships"}]}