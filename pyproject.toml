[build-system]
requires = ["setuptools >= 61.0"]
build-backend = "setuptools.build_meta"

[project]
name = "bfabric"
description = "Python client for the B-Fabric WSDL API"
version = "1.13.9"
license = { text = "GPL-3.0" }
authors = [
    { name = "Christian Panse", email = "cp@fgcz.ethz.ch" },
    { name = "Leonardo Schwarz", email = "leonardo.schwarz@fgcz.ethz.ch" },
    { name = "Aleksejs Fomins" },
    { name = "Marco Schmidt" },
    { name = "Maria d'Errico" },
    { name = "Witold Eryk Wolski" }
]
requires-python = ">=3.9"
dependencies = [
    "suds >= 1.1.2",
    "PyYAML >= 6.0",
    "Flask >= 3.0.3",
    "rich >= 13.7.1",
    "zeep >= 4.2.1",
    "polars-lts-cpu >= 0.20.25; platform_machine == 'x86_64' and platform_system == 'Darwin'",
    "polars >= 0.20.25; platform_machine != 'x86_64' or platform_system != 'Darwin'",
    "loguru>=0.7",
    "pydantic>=2.9.2",
    "eval_type_backport; python_version < '3.10'",
    "python-dateutil >= 2.9.0",
    "cyclopts >= 2.9.9",
    #"platformdirs >= 4.3",
]

[project.optional-dependencies]
dev = [
    "bfabric[doc,test]",
    "black",
    "isort",
    "ruff",
    "licensecheck",
    "nox",
    "uv",
]
doc = ["mkdocs", "mkdocs-material", "mkdocstrings[python]"]
test = ["pytest", "pytest-mock", "logot"]
typing = ["mypy", "types-requests", "lxml-stubs", "pandas-stubs", "types-python-dateutil"]

[project.urls]
Homepage = "https://github.com/fgcz/bfabricPy"
Repository = "https://github.com/fgcz/bfabricPy"

[project.scripts]
"bfabric_flask.py" = "bfabric_scripts.bfabric_flask:main"
#bfabric_feeder_resource_autoQC="bfabric_scripts.bfabric_feeder_resource_autoQC:main"
"bfabric_list_not_existing_storage_directories.py" = "bfabric_scripts.bfabric_list_not_existing_storage_directories:main"
"bfabric_list_not_available_proteomics_workunits.py" = "bfabric_scripts.bfabric_list_not_available_proteomics_workunits:main"
"bfabric_list_workunit_parameters.py" = "bfabric_scripts.bfabric_list_workunit_parameters:main"
"bfabric_upload_resource.py" = "bfabric_scripts.bfabric_upload_resource:main"
"bfabric_logthis.py" = "bfabric_scripts.bfabric_logthis:main"
"bfabric_setResourceStatus_available.py" = "bfabric_scripts.bfabric_setResourceStatus_available:main"
"bfabric_setExternalJobStatus_done.py" = "bfabric_scripts.bfabric_setExternalJobStatus_done:main"
"bfabric_setWorkunitStatus_available.py" = "bfabric_scripts.bfabric_setWorkunitStatus:main_available"
"bfabric_setWorkunitStatus_processing.py" = "bfabric_scripts.bfabric_setWorkunitStatus:main_processing"
"bfabric_setWorkunitStatus_failed.py" = "bfabric_scripts.bfabric_setWorkunitStatus:main_failed"
"bfabric_delete.py" = "bfabric_scripts.bfabric_delete:main"
"bfabric_read.py" = "bfabric_scripts.bfabric_read:main"
"bfabric_read_samples_of_workunit.py" = "bfabric_scripts.bfabric_read_samples_of_workunit:main"
"bfabric_read_samples_from_dataset.py" = "bfabric_scripts.bfabric_read_samples_from_dataset:main"
"bfabric_save_csv2dataset.py" = "bfabric_scripts.bfabric_save_csv2dataset:main"
"bfabric_save_dataset2csv.py" = "bfabric_scripts.bfabric_save_dataset2csv:main"
"bfabric_save_fasta.py" = "bfabric_scripts.bfabric_save_fasta:main"
"bfabric_save_importresource_sample.py" = "bfabric_scripts.bfabric_save_importresource_sample:main"
"bfabric_save_link_to_workunit.py" = "bfabric_scripts.bfabric_save_link_to_workunit:main"
#bfabric_save_resource="bfabric_scripts.bfabric_save_resource:main"
"bfabric_save_workunit_attribute.py" = "bfabric_scripts.bfabric_save_workunit_attribute:main"
"bfabric_save_workflowstep.py" = "bfabric_scripts.bfabric_save_workflowstep:main"
"bfabric_slurm_queue_status.py" = "bfabric_scripts.bfabric_slurm_queue_status:main"
"bfabric_save_resource_description.py" = "bfabric_scripts.bfabric_save_resource_description:main"

[tool.setuptools.package-data]
"*" = ["py.typed"]

[tool.uv]
reinstall-package = ["bfabric", "bfabric_scripts"]

[tool.black]
line-length = 120
target-version = ["py39"]

[tool.ruff]
line-length = 120
indent-width = 4
target-version = "py39"

[tool.ruff.lint]
select = ["ANN", "BLE", "D103", "E", "EXE", "F", "N", "PLW", "PTH", "SIM", "TCH", "UP", "W191"]
ignore = ["ANN101", "ANN102", "ANN401"]

[tool.ruff.lint.per-file-ignores]
"**/bfabric_scripts/**" = ["ALL"]
"**/wrapper_creator/**" = ["ALL"]
"**/examples/**" = ["ALL"]
"**/tests/**" = ["ALL"]
"noxfile.py" = ["ALL"]

[tool.licensecheck]
using = "PEP631"

[tool.pytest.ini_options]
logot_capturer = "logot.loguru.LoguruCapturer"

[tool.check-tests-structure]
sources_path = "src/bfabric"
tests_path = "tests/unit"
allow_missing_tests = true
