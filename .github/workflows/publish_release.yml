name: Unified Package Release
on:
  push:
    branches:
      - release
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target PyPI'
        type: choice
        options:
          - test
          - production
        default: test
        required: true
      force_packages:
        description: 'Force release of specific packages (comma separated, leave empty to auto-detect)'
        type: string
        required: false
jobs:
  check-packages:
    runs-on: ubuntu-latest
    outputs:
      packages_to_release: ${{ steps.check-versions.outputs.packages-to-release }}
    steps:
      - uses: actions/checkout@v4
      - name: Set PyPI repository URL
        id: set-repo-url
        run: |
          if [ "${{ github.event.inputs.environment }}" == "production" ] || [ "${{ github.event_name }}" == "push" ]; then
            echo "PYPI_REPOSITORY_URL=https://pypi.org" >> $GITHUB_ENV
          else
            echo "PYPI_REPOSITORY_URL=https://test.pypi.org" >> $GITHUB_ENV
          fi
          echo "PyPI repository URL: ${{ env.PYPI_REPOSITORY_URL }}"
      - name: Install hatch
        run: pip install hatch
      - name: Check which packages need to be released
        id: check-versions
        uses: ./.github/actions/check-package-versions
        with:
          packages: "bfabric,bfabric_scripts,bfabric_app_runner"
          pypi-url: ${{ env.PYPI_REPOSITORY_URL }}
          force-packages: ${{ github.event.inputs.force_packages }}
          priority-order: "bfabric,bfabric_scripts,bfabric_app_runner"
  release-packages:
    needs: check-packages
    if: ${{ needs.check-packages.outputs.packages_to_release != '[]' }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write # permission to create tags and releases
    strategy:
      matrix:
        package: ${{ fromJson(needs.check-packages.outputs.packages_to_release) }}
      # Run sequentially to ensure proper order of releases
      max-parallel: 1
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install hatch
        run: pip install hatch
      - name: Set PyPI repository URL
        run: |
          if [ "${{ github.event.inputs.environment }}" == "production" ] || [ "${{ github.event_name }}" == "push" ]; then
            echo "PYPI_REPOSITORY_URL=https://upload.pypi.org/legacy/" >> $GITHUB_ENV
          else
            echo "PYPI_REPOSITORY_URL=https://test.pypi.org/legacy/" >> $GITHUB_ENV
          fi
          echo "Target PyPI repository: ${{ env.PYPI_REPOSITORY_URL }}"
      - name: Get package version
        id: get-version
        run: |
          cd ${{ matrix.package }}
          VERSION=$(hatch version)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Package ${{ matrix.package }} version: $VERSION"
      - name: Build package
        run: |
          cd ${{ matrix.package }}
          hatch build
      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: ${{ env.PYPI_REPOSITORY_URL }}
          packages-dir: ${{ matrix.package }}/dist
      - name: Create and push tag
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          TAG_NAME="${{ matrix.package }}/${{ env.VERSION }}"
          git tag -a "$TAG_NAME" -m "Release ${{ matrix.package }} version ${{ env.VERSION }}"
          git push origin "$TAG_NAME"
      - name: Extract changelog
        id: extract-changelog
        uses: ./.github/actions/extract-changelog
        with:
          changelog-path: ${{ matrix.package }}/docs/changelog.md
          version: ${{ env.VERSION }}
          package: ${{ matrix.package }}
      - name: Create GitHub Release
        shell: bash
        run: |
          set -e

          NOTES="${{ steps.extract-changelog.outputs.changelog-entry }}"
          TAG_NAME="${{ matrix.package }}/${{ env.VERSION }}"

          gh release create "$TAG_NAME" \
            --title "Release ${{ matrix.package }} ${{ env.VERSION }}" \
            --notes "$NOTES" \
            --target "$GITHUB_SHA" \
            --draft
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Debug package info
        run: |
          echo "Built and published package: ${{ matrix.package }}"
          echo "Created tag: ${{ matrix.package }}/${{ env.VERSION }}"
          if [ "${{ env.PYPI_REPOSITORY_URL }}" == "https://upload.pypi.org/legacy/" ]; then
            echo "Check it at: https://pypi.org/project/${{ matrix.package }}/"
          else
            echo "Check it at: https://test.pypi.org/project/${{ matrix.package }}/"
          fi
